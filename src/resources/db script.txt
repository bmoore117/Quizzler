db.questions.insert({_id: 1, type: "multipleChoice", question: "Which is not an advantage of using a closure?", answers: {a: "Prevent pollution of global scope", b: "Encapsulation", c: "Private properties and methods", d: "Allow conditional use of 'strict mode'"}, correctAnswer: "a"})
db.questions.insert({_id: 2, type: "multipleChoice", question: "To create a columned list of two­line email subjects and dates for a master­detail view, which are the most semantically correct?", answers: {a: "<div>+<span>", b: "<tr>+<td>", c: "<ul>+<li>", d: "<p>+<br>", e: "none of these", f: "all of these"}, correctAnswer: "a"})
db.questions.insert({_id: 3, type: "multipleChoice", question: "To pass an array of strings to a function, you should not use...", answers: {a: "fn.apply(this, stringsArray)", b: "fn.call(this, stringsArray)", c: "fn.bind(this, stringsArray)"}, correctAnswer: "a"})
db.questions.insert({_id: 4, type: "fillIn", question: "____ and ____ would be the HTML tags you would use to display a menu item and its description", correctAnswers: ["abc", "123"]})
db.questions.insert({_id: 5, type: "multipleChoice", question: "Given this:", code: "angular.module(‘myModule’,[]).service(‘myService’,(function() {\n\tvar message = “Message one!”\n\tvar getMessage = function() {\n\t\treturn this.message\n\t}\n\tthis.message = “Message two!”\n\tthis.getMessage = function() {\n\t\treturn message\n\t}\n\treturn function() {\n\t\treturn {\n\t\t\tgetMessage: getMessage,\n\t\t\tmessage: “Message three!”\n\t\t}\n\t}\n})())", question2: "Which message will be returned by injecting this service and executing \"myService.getMessage()\"", answers: {a: "1", b: "2", c: "3"}, correctAnswer: "a"})

angular.module(‘myModule’,[]).service(‘myService’,(function() {
	var message = “Message one!”
	var getMessage = function() {
		return this.message
	}
	this.message = “Message two!”
	this.getMessage = function() {
		return message
	}
	return function() {
		return {
			getMessage: getMessage,
			message: “Message three!”
		}
	}
})())
